// <auto-generated />
using System;
using A_journey_through_miniature_Uzhhorod.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace A_journey_through_miniature_Uzhhorod.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSecret")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestId")
                        .IsUnique();

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.FavoriteMiniature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MiniatureId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MiniatureId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteMiniatures");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminResponse")
                        .HasColumnType("text");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Miniature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("ModelUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Miniatures");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("IconName")
                        .HasColumnType("text");

                    b.Property<int?>("ParentQuestId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetCount")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentQuestId");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MiniatureId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MiniatureId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.AchievementTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.ToTable("AchievementTranslations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.EventTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EventId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventTranslations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.MiniatureTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MiniatureId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MiniatureId");

                    b.ToTable("MiniatureTranslations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.QuestTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestTranslations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.UserActivityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserActivityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserActivityId");

                    b.ToTable("UserActivityTranslations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("User");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Active");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AchievementId");

                    b.HasIndex("UserId");

                    b.ToTable("UserAchievements");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserQuest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<int>("QuestId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.HasIndex("UserId");

                    b.ToTable("UserQuests");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserQuestAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TargetKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserQuestActions");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", "Quest")
                        .WithOne()
                        .HasForeignKey("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", "QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.FavoriteMiniature", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Miniature", "Miniature")
                        .WithMany()
                        .HasForeignKey("MiniatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany("FavoriteMiniatures")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miniature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Feedback", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", "ParentQuest")
                        .WithMany("ChildQuests")
                        .HasForeignKey("ParentQuestId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentQuest");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Review", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Miniature", "Miniature")
                        .WithMany("Reviews")
                        .HasForeignKey("MiniatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miniature");

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.AchievementTranslation", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", "Achievement")
                        .WithMany("Translations")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.EventTranslation", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Event", "Event")
                        .WithMany("Translations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.MiniatureTranslation", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Miniature", "Miniature")
                        .WithMany("Translations")
                        .HasForeignKey("MiniatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miniature");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.QuestTranslation", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", "Quest")
                        .WithMany("Translations")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Translation.UserActivityTranslation", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.UserActivity", "UserActivity")
                        .WithMany("Translations")
                        .HasForeignKey("UserActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserActivity");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserAchievement", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserActivity", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserQuest", b =>
                {
                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", "Quest")
                        .WithMany()
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("A_journey_through_miniature_Uzhhorod.Database.Models.User", "User")
                        .WithMany("UserQuests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quest");

                    b.Navigation("User");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Achievement", b =>
                {
                    b.Navigation("Translations");

                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Event", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Miniature", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.Quest", b =>
                {
                    b.Navigation("ChildQuests");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.User", b =>
                {
                    b.Navigation("FavoriteMiniatures");

                    b.Navigation("Reviews");

                    b.Navigation("UserAchievements");

                    b.Navigation("UserQuests");
                });

            modelBuilder.Entity("A_journey_through_miniature_Uzhhorod.Database.Models.UserActivity", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
